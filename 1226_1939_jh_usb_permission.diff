diff --git a/UsbDevice/src/main/AndroidManifest.xml b/UsbDevice/src/main/AndroidManifest.xml
index 87f39c8..ee64b1b 100644
--- a/UsbDevice/src/main/AndroidManifest.xml
+++ b/UsbDevice/src/main/AndroidManifest.xml
@@ -1,8 +1,11 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.htc.vr.UsbDevice">
+    package="com.htc.vr.UsbDevice"
+    android:hardwareAccelerated="true">
+    
     <uses-permission android:name="com.htc.vr.core.server.VRDataProvider"/>
     <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.MANAGE_USB" />
     <application
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
diff --git a/UsbDevice/src/main/java/android/hardware/usb/IUsbManager.java b/UsbDevice/src/main/java/android/hardware/usb/IUsbManager.java
new file mode 100644
index 0000000..263d65a
--- /dev/null
+++ b/UsbDevice/src/main/java/android/hardware/usb/IUsbManager.java
@@ -0,0 +1,141 @@
+package android.hardware.usb;
+
+public interface IUsbManager extends android.os.IInterface {
+    /** Local-side IPC implementation stub class. */
+    public static abstract class Stub extends android.os.Binder implements
+            android.hardware.usb.IUsbManager {
+        /** Construct the stub at attach it to the interface. */
+        public Stub() {
+            throw new RuntimeException("Stub!");
+        }
+
+        /**
+         * Cast an IBinder object into an android.hardware.usb.IUsbManager
+         * interface, generating a proxy if needed.
+         */
+        public static android.hardware.usb.IUsbManager asInterface(
+                android.os.IBinder obj) {
+            throw new RuntimeException("Stub!");
+        }
+
+        public android.os.IBinder asBinder() {
+            throw new RuntimeException("Stub!");
+        }
+
+        public boolean onTransact(int code, android.os.Parcel data,
+                                  android.os.Parcel reply, int flags)
+                throws android.os.RemoteException {
+            throw new RuntimeException("Stub!");
+        }
+
+        static final int TRANSACTION_getDeviceList = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
+        static final int TRANSACTION_openDevice = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
+        static final int TRANSACTION_getCurrentAccessory = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
+        static final int TRANSACTION_openAccessory = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
+        static final int TRANSACTION_setDevicePackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);
+        static final int TRANSACTION_setAccessoryPackage = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);
+        static final int TRANSACTION_hasDevicePermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 6);
+        static final int TRANSACTION_hasAccessoryPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 7);
+        static final int TRANSACTION_requestDevicePermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 8);
+        static final int TRANSACTION_requestAccessoryPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 9);
+        static final int TRANSACTION_grantDevicePermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 10);
+        static final int TRANSACTION_grantAccessoryPermission = (android.os.IBinder.FIRST_CALL_TRANSACTION + 11);
+        static final int TRANSACTION_hasDefaults = (android.os.IBinder.FIRST_CALL_TRANSACTION + 12);
+        static final int TRANSACTION_clearDefaults = (android.os.IBinder.FIRST_CALL_TRANSACTION + 13);
+        static final int TRANSACTION_setCurrentFunction = (android.os.IBinder.FIRST_CALL_TRANSACTION + 14);
+        static final int TRANSACTION_setMassStorageBackingFile = (android.os.IBinder.FIRST_CALL_TRANSACTION + 15);
+    }
+
+    /* Returns a list of all currently attached USB devices */
+    public void getDeviceList(android.os.Bundle devices)
+            throws android.os.RemoteException;
+
+    /*
+     * Returns a file descriptor for communicating with the USB device. The
+     * native fd can be passed to usb_device_new() in libusbhost.
+     */
+    public android.os.ParcelFileDescriptor openDevice(
+            java.lang.String deviceName) throws android.os.RemoteException;
+
+    /* Returns the currently attached USB accessory */
+    public android.hardware.usb.UsbAccessory getCurrentAccessory()
+            throws android.os.RemoteException;
+
+    /*
+     * Returns a file descriptor for communicating with the USB accessory. This
+     * file descriptor can be used with standard Java file operations.
+     */
+    public android.os.ParcelFileDescriptor openAccessory(
+            android.hardware.usb.UsbAccessory accessory)
+            throws android.os.RemoteException;
+
+    /*
+     * Sets the default package for a USB device (or clears it if the package
+     * name is null)
+     */
+    public void setDevicePackage(android.hardware.usb.UsbDevice device,
+                                 java.lang.String packageName) throws android.os.RemoteException;
+
+    /*
+     * Sets the default package for a USB accessory (or clears it if the package
+     * name is null)
+     */
+    public void setAccessoryPackage(
+            android.hardware.usb.UsbAccessory accessory,
+            java.lang.String packageName) throws android.os.RemoteException;
+
+    /* Returns true if the caller has permission to access the device. */
+    public boolean hasDevicePermission(android.hardware.usb.UsbDevice device)
+            throws android.os.RemoteException;
+
+    /* Returns true if the caller has permission to access the accessory. */
+    public boolean hasAccessoryPermission(
+            android.hardware.usb.UsbAccessory accessory)
+            throws android.os.RemoteException;
+
+    /*
+     * Requests permission for the given package to access the device. Will
+     * display a system dialog to query the user if permission had not already
+     * been given.
+     */
+    public void requestDevicePermission(android.hardware.usb.UsbDevice device,
+                                        java.lang.String packageName, android.app.PendingIntent pi)
+            throws android.os.RemoteException;
+
+    /*
+     * Requests permission for the given package to access the accessory. Will
+     * display a system dialog to query the user if permission had not already
+     * been given. Result is returned via pi.
+     */
+    public void requestAccessoryPermission(
+            android.hardware.usb.UsbAccessory accessory,
+            java.lang.String packageName, android.app.PendingIntent pi)
+            throws android.os.RemoteException;
+
+    /* Grants permission for the given UID to access the device */
+    public void grantDevicePermission(android.hardware.usb.UsbDevice device,
+                                      int uid) throws android.os.RemoteException;
+
+    /* Grants permission for the given UID to access the accessory */
+    public void grantAccessoryPermission(
+            android.hardware.usb.UsbAccessory accessory, int uid)
+            throws android.os.RemoteException;
+
+    /*
+     * Returns true if the USB manager has default preferences or permissions
+     * for the package
+     */
+    public boolean hasDefaults(java.lang.String packageName)
+            throws android.os.RemoteException;
+
+    /* Clears default preferences and permissions for the package */
+    public void clearDefaults(java.lang.String packageName)
+            throws android.os.RemoteException;
+
+    /* Sets the current USB function. */
+    public void setCurrentFunction(java.lang.String function,
+                                   boolean makeDefault) throws android.os.RemoteException;
+    /* Sets the file path for USB mass storage backing file. */
+    public void setMassStorageBackingFile(java.lang.String path)
+            throws android.os.RemoteException;
+}
\ No newline at end of file
diff --git a/UsbDevice/src/main/java/android/os/ServiceManager.java b/UsbDevice/src/main/java/android/os/ServiceManager.java
new file mode 100644
index 0000000..482b07e
--- /dev/null
+++ b/UsbDevice/src/main/java/android/os/ServiceManager.java
@@ -0,0 +1,47 @@
+package android.os;
+
+import java.util.Map;
+
+public final class ServiceManager {
+    public static IBinder getService(String name) {
+        throw new RuntimeException("Stub!");
+    }
+
+    /**
+     * Place a new @a service called @a name into the service manager.
+     *
+     * @param name
+     *            the name of the new service
+     * @param service
+     *            the service object
+     */
+    public static void addService(String name, IBinder service) {
+        throw new RuntimeException("Stub!");
+    }
+
+    /**
+     * Retrieve an existing service called @a name from the service manager.
+     * Non-blocking.
+     */
+    public static IBinder checkService(String name) {
+        throw new RuntimeException("Stub!");
+    }
+
+    public static String[] listServices() throws RemoteException {
+        throw new RuntimeException("Stub!");
+    }
+
+    /**
+     * This is only intended to be called when the process is first being
+     * brought up and bound by the activity manager. There is only one thread in
+     * the process at that time, so no locking is done.
+     *
+     * @param cache
+     *            the cache of service references
+     * @hide
+     */
+    public static void initServiceCache(Map<String, IBinder> cache) {
+        throw new RuntimeException("Stub!");
+    }
+}
+
diff --git a/UsbDevice/src/main/java/com/htc/vr/UsbDevice/McuUsbDevice.java b/UsbDevice/src/main/java/com/htc/vr/UsbDevice/McuUsbDevice.java
index d01d0ae..bf2cf35 100755
--- a/UsbDevice/src/main/java/com/htc/vr/UsbDevice/McuUsbDevice.java
+++ b/UsbDevice/src/main/java/com/htc/vr/UsbDevice/McuUsbDevice.java
@@ -38,6 +38,14 @@ import java.util.concurrent.TimeoutException;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.TimeUnit;
 
+import android.content.pm.PackageManager;
+import android.content.pm.ApplicationInfo;
+import android.os.IBinder;
+import android.os.ServiceManager;
+import android.hardware.usb.IUsbManager;
+import android.os.RemoteException;
+import android.content.pm.PackageManager.NameNotFoundException;
+
 /**
  * Created by haroldchao on 7/15/16.
  */
@@ -750,8 +758,32 @@ public class McuUsbDevice extends ITrackedDevice implements IDisplay {
             while (deviceIterator.hasNext()) {
                 device = deviceIterator.next();
                 if (device.getVendorId() == target_vendor_id && device.getProductId() == target_product_id) {
+                    //mUsbManager.getDefault();
                     if (!mUsbManager.hasPermission(device)) {
-                        mUsbManager.requestPermission(device, mPermissionIntent);
+                        //mUsbManager.requestPermission(device, mPermissionIntent);
+                        Log.d(TAG,"__jh__ start request usb permission!"); 
+
+                        Intent intent = new Intent();  
+                        intent.setAction(ACTION_USB_PERMISSION);  
+                        
+                        intent.putExtra(UsbManager.EXTRA_DEVICE, device);  
+                        intent.putExtra(UsbManager.EXTRA_PERMISSION_GRANTED, true);  
+                        final PackageManager pm = mContext.getPackageManager();  
+                        try {  
+                            ApplicationInfo aInfo = pm.getApplicationInfo(mContext.getPackageName(),0);  
+                            IBinder b = ServiceManager.getService(Context.USB_SERVICE);  
+                            IUsbManager service = IUsbManager.Stub.asInterface(b);  
+                            service.grantDevicePermission(device, aInfo.uid); 
+                            Log.d(TAG,"app uid="  + aInfo.uid); 
+                        } catch (RemoteException e) {  
+                            e.printStackTrace();  
+                        } catch (NameNotFoundException e) { 
+                            e.printStackTrace();  
+                        }  
+                        mContext.sendBroadcast(intent);  
+                        Log.d(TAG,"sendbroadcast intent="  + intent); 
+
+        
                     }
                     while (!mUsbManager.hasPermission(device)) {
                         Log.v(TAG, "Wait for grant permission");
